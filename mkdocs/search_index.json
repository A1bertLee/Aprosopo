{
    "docs": [
        {
            "location": "/", 
            "text": "Aprosopo\n\n\nA highly customizable dark and light theme.\n\n\n\n\nOverview\n\n\n\n\n\n\nAll graphics have been created from scratch, though styling takes inspiration from themes mentioned below.\n\n\nAprosopo takes inspiration from:\n\n\n\n\nPhoenix Theme: \nhttps://github.com/netatoo/phoenix-theme\n\n\nNil Theme: \nhttps://github.com/nilium/st2-nil-theme\n\n\nFlatland Theme: \nhttps://github.com/thinkpixellab/flatland\n\n\nTomorrow Color Schemes: \nhttps://github.com/chriskempson/tomorrow-theme\n\n\nSoda Theme \nhttp://buymeasoda.com\n\n\n\n\nFeatures\n\n\n\n\nTheme and theme settings can all be set via the menu\n\n\nSelect different theme color variations\n\n\nSelect different dirty indicator colors\n\n\nCustomize the tab styling\n\n\nCustomize the sidebar styling\n\n\n2 included color schemes", 
            "title": "About Theme Aprosopo"
        }, 
        {
            "location": "/#aprosopo", 
            "text": "A highly customizable dark and light theme.", 
            "title": "Aprosopo"
        }, 
        {
            "location": "/#overview", 
            "text": "All graphics have been created from scratch, though styling takes inspiration from themes mentioned below.  Aprosopo takes inspiration from:   Phoenix Theme:  https://github.com/netatoo/phoenix-theme  Nil Theme:  https://github.com/nilium/st2-nil-theme  Flatland Theme:  https://github.com/thinkpixellab/flatland  Tomorrow Color Schemes:  https://github.com/chriskempson/tomorrow-theme  Soda Theme  http://buymeasoda.com", 
            "title": "Overview"
        }, 
        {
            "location": "/#features", 
            "text": "Theme and theme settings can all be set via the menu  Select different theme color variations  Select different dirty indicator colors  Customize the tab styling  Customize the sidebar styling  2 included color schemes", 
            "title": "Features"
        }, 
        {
            "location": "/installation/", 
            "text": "Installation\n\n\nInstalling Aprosopo.\n\n\n\n\nPackage Control\n\n\nThe recommended way to install Aprosopo is via \nPackage Control\n.  Package Control will install the correct branch on your system and keep it up to date.\n\n\n\n\n\n\nEnsure Package Control is installed.  Instructions are found \nhere\n.\n\n\n\n\n\n\nIn sublime, press \nctrl\n + \nshift\n + \np\n (Win, Linux) or \ncmd\n + \nshift\n + \np\n (OSX) to bring up the quick panel.  It will show a list of installable plugins.\n\n\n\n\n\n\nStart typing \nAprosopo\n, when you see it, select it.\n\n\n\n\n\n\nRestart to be sure everything is loaded proper.\n\n\n\n\n\n\nEnjoy!\n\n\n\n\n\n\nGit Cloning\n\n\n\n\nWarning\n\n\nThis is not the recommended way to install Aprosopo for the casual user as it requires the user to know which branch to install, know how to use git, and \nwill not\n get automatically updated.\n\n\nIf you are forking for a pull request, this is the way to go, just replace the official repository with the link for your fork.\n\n\n\n\n\n\n\n\nQuit Sublime Text.\n\n\n\n\n\n\nOpen a terminal:\n\n\ncd /path/to/Sublime Text 3/Packages\ngit clone https://github.com/facelessuser/Aprosopo.git Aprosopo\n\n\n\n\n\n\n\n\n\n3 Restart Sublime Text.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#installation", 
            "text": "Installing Aprosopo.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#package-control", 
            "text": "The recommended way to install Aprosopo is via  Package Control .  Package Control will install the correct branch on your system and keep it up to date.    Ensure Package Control is installed.  Instructions are found  here .    In sublime, press  ctrl  +  shift  +  p  (Win, Linux) or  cmd  +  shift  +  p  (OSX) to bring up the quick panel.  It will show a list of installable plugins.    Start typing  Aprosopo , when you see it, select it.    Restart to be sure everything is loaded proper.    Enjoy!", 
            "title": "Package Control"
        }, 
        {
            "location": "/installation/#git-cloning", 
            "text": "Warning  This is not the recommended way to install Aprosopo for the casual user as it requires the user to know which branch to install, know how to use git, and  will not  get automatically updated.  If you are forking for a pull request, this is the way to go, just replace the official repository with the link for your fork.     Quit Sublime Text.    Open a terminal:  cd /path/to/Sublime Text 3/Packages\ngit clone https://github.com/facelessuser/Aprosopo.git Aprosopo    3 Restart Sublime Text.", 
            "title": "Git Cloning"
        }, 
        {
            "location": "/usage/", 
            "text": "User Guide\n\n\nConfiguration of the Aprosopo theme.\n\n\n\n\nOverview\n\n\nIt is highly configurable in regards to to setting colors and styles of \nactive\n and \ndirty\n indicators.\n\n\nBoth the dark and light theme have the following colors that can be used as the base color or dirty color:\n\n\n\n\naqua\n\n\nblue\n\n\ngray\n\n\ngreen\n\n\norange\n\n\npurple\n\n\nred\n\n\nyellow\n\n\n\n\nTabs can be configured in a variety of ways:\n\n\n\n\nThe sidebar also has a number of configuration options:\n\n\n\n\nEven the color scheme for the search bar inputs respond to color changes by altering their highlight color:\n\n\n\n\nTheme is easily selected and configured from the menu:\n\n\n\n\nSetup\n\n\nEverything is driven via the menu.  Go to \nPreferences \n Package Settings \n Theme - Aprosopo\n and set the theme with the color of your choice (a restart may be required after initially setting the theme; when changing features, resizing your window or restarting may be required to refresh the theme elements).  Themes can be unset from the menu as well which should completely cleanup all settings etc.\n\n\nCustomizing\n\n\nFor personal tweaking, feel free to do whatever; fork it, mod it, and share it.  \nThere is no promise I will accept variations on the official branch\n.\n\n\nQuestions\n\n\nST3 and ST2?\n\n\nAs far as I know.\n\n\nI am using ST3 version \n 3062 and I don\nt have sidebar icons?\n\n\nST3 version 3062 introduced new sidebar file icons.  With this new addition, the theme displays the icons differently.  If you are using an ST3 version \n 3062, you can use the menu option \nDisable Sidebar File Icons\n to revert to the old way of displaying folder icons to restore them.\n\n\nRetina?\n\n\nTheoretically, but I don\nt have a retina display to test on.", 
            "title": "User Guide"
        }, 
        {
            "location": "/usage/#user-guide", 
            "text": "Configuration of the Aprosopo theme.", 
            "title": "User Guide"
        }, 
        {
            "location": "/usage/#overview", 
            "text": "It is highly configurable in regards to to setting colors and styles of  active  and  dirty  indicators.  Both the dark and light theme have the following colors that can be used as the base color or dirty color:   aqua  blue  gray  green  orange  purple  red  yellow   Tabs can be configured in a variety of ways:   The sidebar also has a number of configuration options:   Even the color scheme for the search bar inputs respond to color changes by altering their highlight color:   Theme is easily selected and configured from the menu:", 
            "title": "Overview"
        }, 
        {
            "location": "/usage/#setup", 
            "text": "Everything is driven via the menu.  Go to  Preferences   Package Settings   Theme - Aprosopo  and set the theme with the color of your choice (a restart may be required after initially setting the theme; when changing features, resizing your window or restarting may be required to refresh the theme elements).  Themes can be unset from the menu as well which should completely cleanup all settings etc.", 
            "title": "Setup"
        }, 
        {
            "location": "/usage/#customizing", 
            "text": "For personal tweaking, feel free to do whatever; fork it, mod it, and share it.   There is no promise I will accept variations on the official branch .", 
            "title": "Customizing"
        }, 
        {
            "location": "/usage/#questions", 
            "text": "", 
            "title": "Questions"
        }, 
        {
            "location": "/usage/#st3-and-st2", 
            "text": "As far as I know.", 
            "title": "ST3 and ST2?"
        }, 
        {
            "location": "/usage/#i-am-using-st3-version-3062-and-i-dont-have-sidebar-icons", 
            "text": "ST3 version 3062 introduced new sidebar file icons.  With this new addition, the theme displays the icons differently.  If you are using an ST3 version   3062, you can use the menu option  Disable Sidebar File Icons  to revert to the old way of displaying folder icons to restore them.", 
            "title": "I am using ST3 version  3062 and I don't have sidebar icons?"
        }, 
        {
            "location": "/usage/#retina", 
            "text": "Theoretically, but I don t have a retina display to test on.", 
            "title": "Retina?"
        }, 
        {
            "location": "/contributing/", 
            "text": "Contributing \n Support\n\n\nSteps for contributing and getting support.\n\n\n\n\nOverview\n\n\n\n\n\n\n\n\nSublime Versions\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nST2\n=\nversion\nST3\n\n\nCurrently supported and actively maintained as it requires little extra work, but on the official release of \nST3\n, support will probably be discontinued.\n\n\n\n\n\n\nST3\n\n\nFully supported and actively maintained.\n\n\n\n\n\n\n\n\nContribution from the community is encouraged and can be done in a variety of ways:\n\n\n\n\nBug reports.\n\n\nReviewing code.\n\n\nCode patches via pull requests.\n\n\nDocumentation improvements via pull requests.\n\n\n\n\nBug Reports\n\n\n\n\n\n\nPlease \nread the documentation\n and \nsearch the issue tracker\n to try to find the answer to your question \nbefore\n posting an issue.\n\n\n\n\n\n\nWhen creating an issue on the repository, please provide as much info as possible:\n\n\n\n\nSublime Text build.\n\n\nOperating system.\n\n\nErrors in console.\n\n\nDetailed description of the problem.\n\n\nExamples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste.\n\n\n\n\nThe more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.\n\n\n\n\n\n\nBe prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.\n\n\n\n\n\n\nReviewing Code\n\n\nTake part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.\n\n\nPull Requests\n\n\nPull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.\n\n\nContinuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.\n\n\nFeel free to use a virtual environment if you are concerned about installing any of the Python packages.  In the future, I may use tox, but as I currently only test on Python 3.3, I wanted to keep things simple.\n\n\nRunning Validation Tests\n\n\n\n\nTip\n\n\nIf you are running Sublime on a OSX or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below):\n\n\nchmod +x run_tests.sh\n./run_tests.sh\n\n\n\n\n\n\n\nThere are a couple of dependencies that must be present before running the tests.\n\n\n\n\n\n\nAs \nST3\n is the only current actively supported version, Python 3.3 must be used to validate the tests.\n\n\n\n\n\n\nUnit tests are run with \nnose\n.  You can install nose via:\n\n\npip install nose\n\n\n\n\n\nThe tests should be run from the root folder of the plugin by using the following command:\n\n\nnosetests .\n\n\n\n\n\n\n\n\n\nLinting is performed on the entire project with \nflake8\n \nflake8_docstrings\n, \npep8-naming\n.  These can be installed via:\n\n\npip install flake8\npip install flake8_docstrings\npip install pep8-naming\n\n\n\n\n\nLinting is performed with the following command:\n\n\nflake8 .\n\n\n\n\n\n\n\n\n\nDocumentation Improvements\n\n\nA ton of time has been not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn\nt be any need to run validation tests if only updating documentation.\n\n\nI currently use a combination of using [mkdocs][mkdocs.org] with my own custom Python Markdown \nextensions\n to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is \nmkdocs serve\n.", 
            "title": "Contributing & Support"
        }, 
        {
            "location": "/contributing/#contributing-support", 
            "text": "Steps for contributing and getting support.", 
            "title": "Contributing  Support"
        }, 
        {
            "location": "/contributing/#overview", 
            "text": "Sublime Versions  Description      ST2 = version ST3  Currently supported and actively maintained as it requires little extra work, but on the official release of  ST3 , support will probably be discontinued.    ST3  Fully supported and actively maintained.     Contribution from the community is encouraged and can be done in a variety of ways:   Bug reports.  Reviewing code.  Code patches via pull requests.  Documentation improvements via pull requests.", 
            "title": "Overview"
        }, 
        {
            "location": "/contributing/#bug-reports", 
            "text": "Please  read the documentation  and  search the issue tracker  to try to find the answer to your question  before  posting an issue.    When creating an issue on the repository, please provide as much info as possible:   Sublime Text build.  Operating system.  Errors in console.  Detailed description of the problem.  Examples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste.   The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.    Be prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.", 
            "title": "Bug Reports"
        }, 
        {
            "location": "/contributing/#reviewing-code", 
            "text": "Take part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.", 
            "title": "Reviewing Code"
        }, 
        {
            "location": "/contributing/#pull-requests", 
            "text": "Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.  Continuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.  Feel free to use a virtual environment if you are concerned about installing any of the Python packages.  In the future, I may use tox, but as I currently only test on Python 3.3, I wanted to keep things simple.", 
            "title": "Pull Requests"
        }, 
        {
            "location": "/contributing/#running-validation-tests", 
            "text": "Tip  If you are running Sublime on a OSX or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below):  chmod +x run_tests.sh\n./run_tests.sh   There are a couple of dependencies that must be present before running the tests.    As  ST3  is the only current actively supported version, Python 3.3 must be used to validate the tests.    Unit tests are run with  nose .  You can install nose via:  pip install nose  The tests should be run from the root folder of the plugin by using the following command:  nosetests .    Linting is performed on the entire project with  flake8   flake8_docstrings ,  pep8-naming .  These can be installed via:  pip install flake8\npip install flake8_docstrings\npip install pep8-naming  Linting is performed with the following command:  flake8 .", 
            "title": "Running Validation Tests"
        }, 
        {
            "location": "/contributing/#documentation-improvements", 
            "text": "A ton of time has been not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn t be any need to run validation tests if only updating documentation.  I currently use a combination of using [mkdocs][mkdocs.org] with my own custom Python Markdown  extensions  to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is  mkdocs serve .", 
            "title": "Documentation Improvements"
        }
    ]
}